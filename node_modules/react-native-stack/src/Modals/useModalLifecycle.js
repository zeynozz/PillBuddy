import { useContext, useEffect, useRef } from 'react';
import invariant from 'tiny-invariant';
import { ModalLifecycleContext } from './ModalLifecycleContext';
const initialModalLifecycle = {
    didBlur: false,
    didFocus: false,
    willBlur: false,
    willFocus: false
};
export function useModalLifecycle(options) {
    const modalLifecycle = useContext(ModalLifecycleContext);
    invariant(!!modalLifecycle, `You should not use useModalLifecycle outside a <ModalLifecycleContext>`);
    const ref = useRef();
    useEffect(() => {
        if (modalLifecycle) {
            if (options &&
                options.onDidBlur &&
                modalLifecycle.didBlur &&
                ((ref.current && ref.current.didBlur !== modalLifecycle.didBlur) ||
                    !ref.current)) {
                options.onDidBlur();
            }
            if (options &&
                options.onDidFocus &&
                modalLifecycle.didFocus &&
                ((ref.current && ref.current.didFocus !== modalLifecycle.didFocus) ||
                    !ref.current)) {
                options.onDidFocus();
            }
            if (options &&
                options.onWillBlur &&
                modalLifecycle.willBlur &&
                ((ref.current && ref.current.willBlur !== modalLifecycle.willBlur) ||
                    !ref.current)) {
                options.onWillBlur();
            }
            if (options &&
                options.onWillFocus &&
                modalLifecycle.willFocus &&
                ((ref.current && ref.current.willFocus !== modalLifecycle.willFocus) ||
                    !ref.current)) {
                options.onWillFocus();
            }
            ref.current = modalLifecycle;
        }
    }, [modalLifecycle]);
    return modalLifecycle || initialModalLifecycle;
}
