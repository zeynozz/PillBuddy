/// <reference types="react" />
import { UnregisterCallback } from '../App';
export declare type TransitionPromptHook = (location: ILocation, action: RouterAction) => string | false | void;
export declare type Path = string;
export declare type LocationState = any;
export interface ILocation<S = LocationState> {
    pathname: string;
    state: S;
    key: string;
}
export interface IPartialLocation<S = LocationState> {
    pathname: ILocation['pathname'];
    state?: S;
    key?: ILocation['key'];
}
export declare enum RouterAction {
    PUSH = "PUSH",
    REPLACE = "REPLACE",
    POP = "POP",
    RESET = "RESET"
}
export declare enum RouterEventType {
    LocationChange = "locationchange",
    LocationStateChange = "locationstatechange"
}
export declare type LocationChangeEvent<EventLocationState = LocationState> = {
    readonly type: RouterEventType.LocationChange;
    readonly action: RouterAction;
    readonly index: number;
    readonly entries: Array<ILocation<EventLocationState>>;
    readonly length: number;
    readonly location: ILocation<EventLocationState>;
};
export declare type LocationStateChangeEvent<EventLocationState = LocationState> = {
    readonly type: RouterEventType.LocationStateChange;
    readonly key: string;
    readonly state: EventLocationState;
};
export declare type RouterEvent = LocationChangeEvent | LocationStateChangeEvent;
export declare type RouterEventHandler<T = any> = (event: T extends RouterEventType.LocationChange ? LocationChangeEvent : T extends RouterEventType.LocationStateChange ? LocationStateChangeEvent : RouterEvent) => void;
declare function addEventListener<T extends RouterEventType>(type: T, handler: RouterEventHandler<T>): UnregisterCallback;
declare function addEventListener(handler: RouterEventHandler): UnregisterCallback;
declare function removeEventListener(type: RouterEventType, handler: RouterEventHandler): void;
declare function removeEventListener(handler: RouterEventHandler): void;
export interface IRouter<RouterLocationState = LocationState> {
    readonly action: RouterAction;
    readonly index: number;
    readonly entries: Array<ILocation<RouterLocationState>>;
    readonly length: number;
    readonly location: ILocation<RouterLocationState>;
    addEventListener: typeof addEventListener;
    removeEventListener: typeof removeEventListener;
    reset(entries: IPartialLocation[], index?: IRouter['index']): void;
    canGo(n: number): boolean;
    push(path: Path, state?: RouterLocationState): void;
    push(location: IPartialLocation<RouterLocationState>): void;
    replace(path: Path, state?: RouterLocationState): void;
    replace(location: IPartialLocation<RouterLocationState>): void;
    go(n: number): void;
    goBack(): void;
    goForward(): void;
    setLocationState(key: string, state?: RouterLocationState): void;
    block(prompt?: boolean | string | TransitionPromptHook): UnregisterCallback;
}
export interface IRoute<P = React.ReactElement<any> | React.ComponentType<any>> {
    Component?: P | null;
    path: string | string[];
}
export declare type MatchParams = {
    [key: string]: any;
};
export interface IMatch<Params = MatchParams> {
    params: Params;
    path: string;
}
export {};
