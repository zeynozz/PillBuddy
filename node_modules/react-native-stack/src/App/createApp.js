import { AppEventType } from '.';
import { createRouter } from '../Router/createRouter';
export const createApp = (routers = {}, modalsOptions = {}) => {
    const modals = createRouter(modalsOptions);
    function removeModal(key) {
        const index = modals.entries.findIndex(entry => entry.key === key);
        if (index !== -1) {
            const nextEntries = [
                ...modals.entries.slice(0, index),
                ...modals.entries.slice(index + 1)
            ];
            modals.reset(nextEntries);
        }
    }
    function addRouter(key, router) {
        ;
        app.routers = {
            ...app.routers,
            [key]: router
        };
        notifyListeners(AppEventType.RouterAdd, {
            key,
            router,
            type: AppEventType.RouterAdd
        });
    }
    function removeRouter(key) {
        const nextRouters = { ...app.routers, [key]: undefined };
        delete nextRouters[key];
        app.routers = {
            ...nextRouters
        };
        notifyListeners(AppEventType.RouterRemove, {
            key,
            type: AppEventType.RouterRemove
        });
    }
    let listerners = [];
    function addEventListener(type, handler) {
        listerners.push({
            handler: handler || type,
            type: handler ? type : undefined
        });
        return () => {
            if (type) {
                removeEventListener(type, handler);
            }
            else
                removeEventListener(handler);
        };
    }
    function removeEventListener(type, handler) {
        const e = handler
            ? type
            : undefined;
        handler = handler || type;
        listerners = listerners.filter(l => {
            if (e) {
                return l.type === e && l.handler === handler;
            }
            return l.handler === handler;
        });
    }
    function notifyListeners(type, event) {
        listerners.forEach(({ type: t, handler }) => {
            if (!t || t === type)
                handler(event);
        });
    }
    const app = {
        addEventListener,
        addModal: modals.push,
        addRouter,
        modals,
        removeEventListener,
        removeModal,
        removeRouter,
        routers
    };
    return app;
};
