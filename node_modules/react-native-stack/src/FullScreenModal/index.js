import React, { useMemo } from 'react';
import Animated from 'react-native-reanimated';
import { useModalLifecycle } from '../Modals/useModalLifecycle';
import { ScrollView } from '../ScrollView';
import { PanGestureHandler } from './PanGestureHandler';
const { Value, timing, event, block, debug, cond, lessOrEq, set } = Animated;
export const FullScreenModal = ({ children }) => {
    const { handleGestureEvent, handleMomentumScrollEnd, scrollOffsetY, scrollUpEnabled, translateY } = useMemo(() => {
        const state = new Value(-1);
        const scrollOffsetY = new Value(0);
        const scrollUpEnabled = new Value(1);
        const translateY = new Value(0);
        const handleMomentumScrollEnd = event([
            {
                nativeEvent: {
                    contentOffset: { y: scrollOffsetY }
                }
            }
        ]);
        const handleGestureEvent = event([
            {
                nativeEvent: {
                    state,
                    translationY: translateY
                }
            }
        ]);
        return {
            handleGestureEvent,
            handleMomentumScrollEnd,
            scrollOffsetY,
            scrollUpEnabled,
            translateY
        };
    }, []);
    useModalLifecycle({
        onWillBlur: () => { }
    });
    return (<Animated.View style={{
        backgroundColor: 'white',
        bottom: 0,
        left: 0,
        position: 'absolute',
        right: 0,
        top: 0,
        zIndex: 10000000
    }}>
      <ScrollView onScroll={handleMomentumScrollEnd} scrollEventThrottle={16} onMomentumScrollEnd={handleMomentumScrollEnd} style={{
        borderColor: 'red',
        borderWidth: 1,
        transform: [{ translateY }]
    }} contentContainerStyle={{ flexGrow: 1 }}>
        <PanGestureHandler enabled={scrollUpEnabled} activeOffsetY={5} onGestureEvent={handleGestureEvent} onHandlerStateChange={handleGestureEvent}>
          <Animated.View style={{ flex: 1, backgroundColor: 'blue' }}>
            {children}
          </Animated.View>
        </PanGestureHandler>
      </ScrollView>

      <Animated.Code exec={block([
        scrollOffsetY,
        debug('', scrollUpEnabled),
        cond(lessOrEq(scrollOffsetY, 0), set(scrollUpEnabled, 1), set(scrollUpEnabled, 0))
    ])}/>
    </Animated.View>);
};
